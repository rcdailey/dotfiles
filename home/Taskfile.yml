version: '3'

# Global settings
# silent: true - Suppresses command echoing (task: [name] command output)
# This keeps output clean and focused on actual results
silent: true

# Global variables - removed due to Task OS detection issues
# Using deterministic paths for bootstrap, then dynamic detection at runtime

tasks:
  default:
    desc: Complete system setup (homebrew + mise + tools + zsh)
    # Use sequential 'cmds' with 'task:' calls instead of 'deps' to prevent
    # parallel execution conflicts (multiple brew processes, race conditions)
    cmds:
    - task: homebrew
    - task: install-packages
    - task: clean-brew-packages
    - task: install-mise-tools
    - task: zsh

  help:
    desc: Show available tasks
    cmds:
    - echo "Available tasks:"
    - echo "  default             - Complete system setup (homebrew + mise + tools + zsh)"
    - echo "  homebrew            - Install Homebrew package manager"
    - echo "  install-packages    - Install Homebrew packages (including mise)"
    - echo "  install-mise-tools  - Install development tools via mise"
    - echo "  zsh                 - Set up zsh as default shell"
    - echo "  clean-brew-packages - Remove Homebrew packages now managed by mise"
    - echo "  clean               - Clean up package caches"
    - echo "  upgrade-task        - Replace bootstrap task with mise-managed version"

  homebrew:
    desc: Install Homebrew package manager
    # run: once - Ensures this task only executes once even when called by
    # multiple other tasks (mise and zsh both depend on homebrew)
    run: once
    cmds:
    - |
      echo "Setting up Homebrew..."
      if command -v brew >/dev/null 2>&1; then
        echo "Homebrew already installed: $(brew --version | head -n1)"
      else
        echo "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

        # Bootstrap: Use deterministic paths to source Homebrew initially
        if [[ "$(uname -s)" == "Darwin" ]]; then
          if [[ "$(uname -m)" == "arm64" ]]; then
            eval "$(/opt/homebrew/bin/brew shellenv)"
          else
            eval "$(/usr/local/bin/brew shellenv)"
          fi
        else
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        fi

        if command -v brew >/dev/null 2>&1; then
          echo "Homebrew installed successfully: $(brew --version | head -n1)"
        else
          echo "ERROR: Homebrew installation failed" >&2
          exit 1
        fi
      fi


  install-packages:
    desc: Install Homebrew packages (including mise)
    deps: [homebrew]
    cmds:
    - |
      echo "Installing Homebrew packages..."
      # Dynamic detection: Use brew --prefix after brew is available
      eval "$(brew --prefix)/bin/brew shellenv"
      export HOMEBREW_BUNDLE_FILE="$HOME/Brewfile"
      brew bundle

  install-mise-tools:
    desc: Install development tools via mise
    deps: [install-packages]
    cmds:
    - |
      echo "Installing development tools..."
      if command -v mise >/dev/null 2>&1; then
        eval "$(mise env -s zsh)" 2>/dev/null || true
        eval "$(mise activate zsh)" 2>/dev/null || true
        # mise install is idempotent - only installs missing/outdated tools
        mise install
        echo "Development tools installed successfully!"
      else
        echo "ERROR: mise not available - check Homebrew installation" >&2
        exit 1
      fi

  zsh:
    desc: Set up zsh as default shell
    deps: [homebrew]
    silent: false  # Allow interactive sudo prompts
    cmds:
    - |
      echo "Setting up zsh..."
      # Dynamic detection: Use brew to find homebrew-installed zsh
      ZSH_PATH="$(brew --prefix zsh)/bin/zsh"

      # Check if current shell is already a homebrew zsh (handle symlinks)
      if [[ "$SHELL" == "$ZSH_PATH" ]] || [[ "$(readlink -f "$SHELL" 2>/dev/null || echo "$SHELL")" == "$(readlink -f "$ZSH_PATH" 2>/dev/null || echo "$ZSH_PATH")" ]]; then
        echo "zsh is already the default shell (current: $SHELL)"
      else
        if [[ -x "$ZSH_PATH" ]]; then
          echo "Found homebrew zsh at: $ZSH_PATH"
          echo "Version: $($ZSH_PATH --version)"
        else
          echo "Homebrew zsh not found, falling back to system zsh"
          ZSH_PATH="$(which zsh)"
          echo "Using system zsh at: $ZSH_PATH"
        fi

        # Check if zsh is already in /etc/shells
        if ! grep -q "^$ZSH_PATH$" /etc/shells 2>/dev/null; then
          echo ""
          echo "Adding zsh to /etc/shells (requires sudo password)..."
          if echo "$ZSH_PATH" | sudo tee -a /etc/shells >/dev/null; then
            echo "Successfully added zsh to /etc/shells"
          else
            echo "Failed to add zsh to /etc/shells. You may need to run:"
            echo "  echo '$ZSH_PATH' | sudo tee -a /etc/shells"
            exit 1
          fi
        fi

        echo ""
        echo "Changing default shell to zsh (may require password)..."
        if chsh -s "$ZSH_PATH"; then
          echo "Zsh setup complete! Restart terminal for changes to take effect."
        else
          echo "Failed to change shell. You may need to run:"
          echo "  chsh -s '$ZSH_PATH'"
          exit 1
        fi
      fi

  clean-brew-packages:
    desc: Remove Homebrew packages that are now managed by mise
    deps: [install-packages]
    cmds:
    - |
      echo "Removing development packages from Homebrew (migrating to mise)..."

      # Development packages that mise manages (keep mise itself in brew)
      PACKAGES_TO_REMOVE=(
        "fzf" "ripgrep" "eza" "git-delta" "jq" "shfmt" "shellcheck" "age"
        "gh" "coreutils" "chezmoi" "node" "python@3.13" "tree" "uv" "pre-commit"
        "lazygit" "rbw" "go" "k9s" "kubectl" "kustomize" "yq" "sops" "helm"
        "terraform" "act" "crane" "rclone" "yamllint" "golangci-lint"
        "go-task" "git-filter-repo" "iproute2mac"
      )

      # Function to safely remove if package is installed
      safe_remove() {
        local package="$1"
        if brew list --formula 2>/dev/null | grep -q "^${package}$"; then
          echo "Removing formula: $package"
          brew uninstall --ignore-dependencies --force "$package" 2>/dev/null || true
        elif brew list --cask 2>/dev/null | grep -q "^${package}$"; then
          echo "Removing cask: $package"
          brew uninstall --force "$package" 2>/dev/null || true
        fi
      }

      # Remove packages
      for package in "${PACKAGES_TO_REMOVE[@]}"; do
        safe_remove "$package"
      done

      echo "Cleaning up Homebrew..."
      brew cleanup --prune=all 2>/dev/null || true
      brew autoremove 2>/dev/null || true
      echo "Homebrew package removal complete!"

  clean:
    desc: Clean up package caches
    cmds:
    - |
      echo "Cleaning up package caches..."
      if command -v brew >/dev/null 2>&1; then
        brew cleanup --prune=all
        brew autoremove
      fi
      if command -v mise >/dev/null 2>&1; then
        export PATH="$HOME/.local/bin:$PATH"
        mise cache clear
      fi
      echo "Cache cleanup complete!"

  upgrade-task:
    desc: Replace bootstrap task with mise-managed version
    deps: [tools]
    cmds:
    - |
      echo "Upgrading to mise-managed task..."
      export PATH="$HOME/.local/bin:$PATH"
      eval "$(mise env -s zsh)" 2>/dev/null || true

      # Check if mise version is available
      if command -v task >/dev/null 2>&1 && mise which task >/dev/null 2>&1; then
        echo "Task is now managed by mise: $(task --version)"

        # Remove bootstrap binary if it exists
        if [[ -f "/usr/local/bin/task" && ! "$(which task)" == *"mise"* ]]; then
          echo "Removing bootstrap task binary..."
          sudo rm -f /usr/local/bin/task
        fi

        echo "Task upgrade complete!"
      else
        echo "mise-managed task not available yet"
        exit 1
      fi
