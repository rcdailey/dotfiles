#!/bin/bash

set -e

# Function to check if MCP server exists at specified scope
check_mcp_server_exists() {
    local scope=$1

    # Use claude mcp get to check existence without side effects
    local get_output=$(claude mcp get github 2>&1 || true)

    # If the get command fails, server doesn't exist
    if echo "$get_output" | rg -q "No MCP server found with name: github"; then
        return 1
    fi

    # If get succeeds, check if it matches the requested scope
    if [[ "$scope" == "user" ]]; then
        echo "$get_output" | rg -q "Scope: User config" || return 1
    elif [[ "$scope" == "local" ]]; then
        echo "$get_output" | rg -q "Scope: Local config" || return 1
    fi

    return 0
}

# Parse command line arguments
USER_SCOPE=true
REMOVE_MODE=false
while [[ $# -gt 0 ]]; do
    case $1 in
        --local)
            USER_SCOPE=false
            shift
            ;;
        --remove)
            REMOVE_MODE=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo "Usage: $0 [--local] [--remove]"
            echo "  --local   Configure at local level instead of user level"
            echo "  --remove  Remove the MCP server configuration"
            exit 1
            ;;
    esac
done

# Auto-detect local scope only during normal setup (not when using special flags)
if [[ "$USER_SCOPE" == true ]] && [[ "$REMOVE_MODE" == false ]] && check_mcp_server_exists "local"; then
    echo "Local-level GitHub MCP server detected. Using --local scope automatically."
    USER_SCOPE=false
fi

# Set scope variables
if [[ "$USER_SCOPE" == true ]]; then
    SCOPE="user"
    SCOPE_MESSAGE="user scope"
else
    SCOPE="local"
    SCOPE_MESSAGE="local scope"
fi

# Handle removal mode
if [[ "$REMOVE_MODE" == true ]]; then
    echo "=== GitHub MCP Server Removal ==="
    echo "Removing GitHub MCP server from $SCOPE_MESSAGE..."
    claude mcp remove github -s "$SCOPE"
    echo "✅ GitHub MCP server removed successfully from $SCOPE_MESSAGE!"
    exit 0
fi

echo "=== GitHub MCP Server Setup ==="

# Install gh via brew if it doesn't exist
if ! command -v gh &> /dev/null; then
    echo "Installing GitHub CLI..."
    brew install gh
fi

# Set browser for cross-platform compatibility
case "$(uname -s)" in
    Darwin*)
        export BROWSER="open"
        ;;
    Linux*)
        export BROWSER="xdg-open"
        ;;
    CYGWIN*|MINGW*|MSYS*)
        export BROWSER="cmd.exe /c start"
        ;;
esac
echo "BROWSER set to: $BROWSER"

# Check if already authenticated - fail fast if not
if ! gh auth status &> /dev/null; then
    echo "❌ ERROR: GitHub CLI authentication required but not found."
    echo ""
    echo "Please authenticate with GitHub first by running:"
    echo "  gh auth login"
    echo ""
    echo "Then re-run this script."
    exit 1
fi

# Get the token
echo "Obtaining GitHub token..."
TOKEN=$(gh auth token)

if [[ -z "$TOKEN" ]]; then
    echo "Failed to obtain GitHub token"
    exit 1
fi

echo "Token obtained successfully"

# Configure Claude MCP server
echo "Configuring GitHub MCP server..."

# Remove existing server if it exists (this handles token updates gracefully)
if check_mcp_server_exists "$SCOPE"; then
    echo "Updating existing GitHub MCP server configuration..."
    claude mcp remove github -s "$SCOPE"
fi

claude mcp add github "https://api.githubcopilot.com/mcp/" \
    -s "$SCOPE" \
    -t http \
    -H "Authorization: Bearer $TOKEN"

echo "✅ GitHub MCP server configured successfully!"
if [[ "$USER_SCOPE" == true ]]; then
    echo "The server is configured at $SCOPE_MESSAGE and will persist for this user across all projects."
else
    echo "The server is configured at $SCOPE_MESSAGE and will persist for this project only."
fi
