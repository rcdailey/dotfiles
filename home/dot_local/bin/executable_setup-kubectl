#!/bin/bash
# kubectl Setup Script for K3s Cluster
# Automates remote kubectl configuration for homelab

set -e

# Configuration
CLUSTER_HOST="${1:-nami}"
KUBECTL_CONFIG="$HOME/.kube/config"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Functions
log_info() {
    echo -e "${BLUE}🚀 $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Main script
main() {
    log_info "Setting up kubectl for K3s cluster: $CLUSTER_HOST"

    # Check if kubectl is installed
    if ! command -v kubectl >/dev/null 2>&1; then
        log_error "kubectl is not installed. Please install kubectl first."
        echo "  On macOS: brew install kubectl"
        echo "  Or visit: https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/"
        exit 1
    fi

    # Validate we can reach the host
    log_info "Testing connectivity to $CLUSTER_HOST..."
    if ! ping -c 1 "$CLUSTER_HOST" >/dev/null 2>&1; then
        log_error "Cannot reach $CLUSTER_HOST"
        echo "  Make sure the hostname resolves and the server is running"
        echo "  Try: ping $CLUSTER_HOST"
        exit 1
    fi
    log_success "Host $CLUSTER_HOST is reachable"

    # Create kubectl directory
    log_info "Creating kubectl config directory..."
    mkdir -p "$(dirname "$KUBECTL_CONFIG")"

    # Backup existing config if it exists
    if [[ -f "$KUBECTL_CONFIG" ]]; then
        log_warning "Backing up existing kubectl config..."
        cp "$KUBECTL_CONFIG" "$KUBECTL_CONFIG.backup.$(date +%Y%m%d_%H%M%S)"
    fi

    # Copy K3s config from cluster
    log_info "Copying K3s configuration from $CLUSTER_HOST..."
    if ! scp "$CLUSTER_HOST:/etc/rancher/k3s/k3s.yaml" "$KUBECTL_CONFIG"; then
        log_error "Failed to copy config from $CLUSTER_HOST"
        echo "  Make sure you have SSH access to $CLUSTER_HOST"
        echo "  Make sure K3s is running on $CLUSTER_HOST"
        exit 1
    fi

    # Fix the server endpoint
    log_info "Updating server endpoint from localhost to $CLUSTER_HOST..."
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS sed
        sed -i '' "s/127.0.0.1/$CLUSTER_HOST/" "$KUBECTL_CONFIG"
    else
        # Linux sed
        sed -i "s/127.0.0.1/$CLUSTER_HOST/" "$KUBECTL_CONFIG"
    fi

    # Set proper permissions
    log_info "Setting secure permissions on config file..."
    chmod 600 "$KUBECTL_CONFIG"

    # Verify the configuration
    log_info "Testing kubectl connection..."
    if kubectl get nodes >/dev/null 2>&1; then
        log_success "kubectl is working! Here are your cluster nodes:"
        kubectl get nodes
        echo
        log_success "🎉 kubectl setup complete!"
        echo "  Config file: $KUBECTL_CONFIG"
        echo "  Cluster: $CLUSTER_HOST:6443"
        echo "  You can now use kubectl commands"
    else
        log_error "kubectl connection test failed"
        echo "  Check that:"
        echo "  - K3s is running on $CLUSTER_HOST"
        echo "  - Port 6443 is accessible"
        echo "  - Your SSH user has access to /etc/rancher/k3s/k3s.yaml"
        exit 1
    fi
}

# Help function
show_help() {
    echo "kubectl Setup Script for K3s Cluster"
    echo
    echo "Usage: setup-kubectl [CLUSTER_HOST]"
    echo
    echo "Arguments:"
    echo "  CLUSTER_HOST    Hostname or IP of K3s control plane (default: nami)"
    echo
    echo "Examples:"
    echo "  setup-kubectl              # Uses default host 'nami'"
    echo "  setup-kubectl marin        # Uses host 'marin'"
    echo "  setup-kubectl 192.168.1.10 # Uses IP address"
    echo
    echo "Requirements:"
    echo "  - kubectl must be installed"
    echo "  - SSH access to the K3s control plane node"
    echo "  - K3s cluster must be running"
}

# Handle help flag
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
fi

# Run main function
main "$@"
