#!/usr/bin/env python3
"""Claude Code MCP Server Management Script - JSON-First Approach

Simple script that unconditionally merges MCP server configurations from
~/.claude/mcp-servers.json into ~/.claude.json, adding new servers and
replacing existing ones. Resolves rbw: secrets during the merge process.
"""

import json
import subprocess
import sys
from datetime import datetime
from pathlib import Path


def resolve_env_var(env_string: str) -> str:
    """Resolve environment variables with rbw secret lookups.

    Supports formats like:
    - VAR_NAME=rbw:secret-name (gets secret from rbw)
    - VAR_NAME=literal_value (uses literal value)
    """
    if not env_string.startswith("rbw:"):
        return env_string

    secret_name = env_string[4:]  # Remove "rbw:" prefix
    try:
        result = subprocess.run(
            ["rbw", "get", secret_name], capture_output=True, text=True, check=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Error: Failed to get {secret_name} from rbw: {e}", file=sys.stderr)
        print(
            "This likely means rbw is not authenticated. Run 'rbw unlock' first.",
            file=sys.stderr,
        )
        sys.exit(1)


def resolve_server_secrets(server_config: dict) -> dict:
    """Resolve any rbw: secrets in server environment variables and headers."""
    resolved_config = server_config.copy()

    # Resolve environment variables
    if "env" in server_config and server_config["env"]:
        resolved_env = {}
        for key, value in server_config["env"].items():
            resolved_env[key] = resolve_env_var(value)
        resolved_config["env"] = resolved_env

    # Resolve headers
    if "headers" in server_config and server_config["headers"]:
        resolved_headers = {}
        for key, value in server_config["headers"].items():
            resolved_headers[key] = resolve_env_var(value)
        resolved_config["headers"] = resolved_headers

    return resolved_config


def create_backup(claude_json_path: Path) -> Path:
    """Create a timestamped backup of the claude.json file."""
    timestamp = datetime.now().strftime("%Y-%m-%d")
    backup_path = claude_json_path.parent / f".claude.{timestamp}.json"

    # If backup already exists today, add time to make it unique
    if backup_path.exists():
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        backup_path = claude_json_path.parent / f".claude.{timestamp}.json"

    try:
        with open(claude_json_path, "r") as src, open(backup_path, "w") as dst:
            dst.write(src.read())
        print(f"Created backup: {backup_path}")
        return backup_path
    except Exception as e:
        print(f"Error: Failed to create backup: {e}", file=sys.stderr)
        sys.exit(1)


def main():
    """Main function to sync MCP servers."""
    # Define paths
    home_dir = Path.home()
    claude_dir = home_dir / ".claude"
    claude_json_path = home_dir / ".claude.json"
    mcp_servers_json_path = claude_dir / "mcp-servers.json"

    # Check if source configuration exists
    if not mcp_servers_json_path.exists():
        print(
            f"Error: MCP servers configuration not found at {mcp_servers_json_path}",
            file=sys.stderr,
        )
        print(
            "Expected this file to be deployed by chezmoi from home/dot_claude/mcp-servers.json",
            file=sys.stderr,
        )
        sys.exit(1)

    # Check if claude.json exists
    if not claude_json_path.exists():
        print(
            f"Error: Claude configuration not found at {claude_json_path}",
            file=sys.stderr,
        )
        sys.exit(1)

    # Load MCP servers configuration
    try:
        with open(mcp_servers_json_path, "r") as f:
            mcp_servers = json.load(f)
    except Exception as e:
        print(f"Error: Failed to load MCP servers configuration: {e}", file=sys.stderr)
        sys.exit(1)

    # Load Claude configuration
    try:
        with open(claude_json_path, "r") as f:
            claude_config = json.load(f)
    except Exception as e:
        print(f"Error: Failed to load Claude configuration: {e}", file=sys.stderr)
        sys.exit(1)

    # Ensure mcpServers section exists in claude config
    if "mcpServers" not in claude_config:
        claude_config["mcpServers"] = {}

    # Create backup before modifying
    create_backup(claude_json_path)

    # Resolve any rbw: secrets and merge servers unconditionally
    current_servers = claude_config["mcpServers"]
    updated_servers = []

    for server_name, server_config in mcp_servers.items():
        resolved_config = resolve_server_secrets(server_config)
        is_new = server_name not in current_servers

        current_servers[server_name] = resolved_config
        updated_servers.append(server_name)

        if is_new:
            print(f"Adding MCP server: {server_name}")
        else:
            print(f"Updating MCP server: {server_name}")

    # Write updated configuration back to file
    try:
        with open(claude_json_path, "w") as f:
            json.dump(claude_config, f, indent=2)
        print(f"\nSuccessfully processed {len(updated_servers)} MCP server(s)")
        print("Processed servers:", ", ".join(updated_servers))
    except Exception as e:
        print(f"Error: Failed to write Claude configuration: {e}", file=sys.stderr)
        sys.exit(1)

    # Show summary of all servers
    print(f"\nTotal MCP servers configured: {len(current_servers)}")
    versioned_servers = set(mcp_servers.keys())
    system_servers = set(current_servers.keys()) - versioned_servers

    if system_servers:
        print(f"System-specific servers (not managed): {', '.join(system_servers)}")


if __name__ == "__main__":
    main()
